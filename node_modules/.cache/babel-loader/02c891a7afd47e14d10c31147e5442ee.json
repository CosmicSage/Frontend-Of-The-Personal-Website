{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nimport Layout from '../components/MyLayout.js';\nimport Link from 'next/link';\nimport fetch from \"isomorphic-unfetch\";\n\nvar Index = function Index(props) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, \"Batman TV Shows\"), React.createElement(\"ul\", null, props.shows.map(function (show) {\n    return React.createElement(\"li\", {\n      key: show.id\n    }, React.createElement(Link, {\n      as: \"/p/\".concat(show.id),\n      href: \"/post?id=\".concat(show.id)\n    }, React.createElement(\"a\", null, show.name)));\n  })));\n};\n\nIndex.getInitialProps =\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee() {\n  var personal_api_response, response, data, personal_api_data, merged_data;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          personal_api_response = {};\n          _context.next = 3;\n          return fetch('https://api.tvmaze.com/search/shows?q=batman');\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return response.json();\n\n        case 6:\n          data = _context.sent;\n          _context.next = 9;\n          return fetch(\"http://localhost:5000/apii\");\n\n        case 9:\n          personal_api_response = _context.sent;\n          _context.next = 12;\n          return personal_api_response.json();\n\n        case 12:\n          personal_api_data = _context.sent;\n          merged_data = _objectSpread({}, data, personal_api_data);\n          console.log(\"\\x1B[36mits fucked \".concat(Date(), \"\\x1B[0m\"), merged_data);\n          console.log(\"Show data fetched. Count: \".concat(_Object$keys(merged_data).length));\n          return _context.abrupt(\"return\", {\n            shows: data.map(function (entry) {\n              return entry.show;\n            })\n          });\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default Index;","map":{"version":3,"sources":["/mnt/d/Projects/hello-next/pages/index.js"],"names":["Layout","Link","fetch","Index","props","shows","map","show","id","name","getInitialProps","personal_api_response","response","json","data","personal_api_data","merged_data","console","log","Date","length","entry"],"mappings":";;;;;AAAA,OAAOA,MAAP,MAAmB,2BAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAW;AACvB,SACA,oBAAC,MAAD,QACE,kDADF,EAEE,gCACGA,KAAK,CAACC,KAAN,CAAYC,GAAZ,CAAgB,UAAAC,IAAI;AAAA,WACnB;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC;AAAd,OACE,oBAAC,IAAD;AAAM,MAAA,EAAE,eAAQD,IAAI,CAACC,EAAb,CAAR;AAA2B,MAAA,IAAI,qBAAcD,IAAI,CAACC,EAAnB;AAA/B,OACE,+BAAID,IAAI,CAACE,IAAT,CADF,CADF,CADmB;AAAA,GAApB,CADH,CAFF,CADA;AAaA,CAdF;;AAgBAN,KAAK,CAACO,eAAN;AAAA;AAAA;AAAA;AAAA,yBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBC,UAAAA,qBADkB,GACM,EADN;AAAA;AAAA,iBAECT,KAAK,CAAC,8CAAD,CAFN;;AAAA;AAEhBU,UAAAA,QAFgB;AAAA;AAAA,iBAGHA,QAAQ,CAACC,IAAT,EAHG;;AAAA;AAGhBC,UAAAA,IAHgB;AAAA;AAAA,iBAIQZ,KAAK,CAAC,4BAAD,CAJb;;AAAA;AAItBS,UAAAA,qBAJsB;AAAA;AAAA,iBAKUA,qBAAqB,CAACE,IAAtB,EALV;;AAAA;AAKhBE,UAAAA,iBALgB;AAMhBC,UAAAA,WANgB,qBAMEF,IANF,EAMWC,iBANX;AAOtBE,UAAAA,OAAO,CAACC,GAAR,8BAAkCC,IAAI,EAAtC,cAAmDH,WAAnD;AAEAC,UAAAA,OAAO,CAACC,GAAR,qCAAyC,aAAYF,WAAZ,EAAyBI,MAAlE;AATsB,2CAWf;AACLf,YAAAA,KAAK,EAAES,IAAI,CAACR,GAAL,CAAS,UAAAe,KAAK;AAAA,qBAAIA,KAAK,CAACd,IAAV;AAAA,aAAd;AADF,WAXe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;AAgBA,eAAeJ,KAAf","sourcesContent":["import Layout from '../components/MyLayout.js';\nimport Link from 'next/link';\nimport fetch from \"isomorphic-unfetch\";\n\nconst Index = (props) => {\n  return (\n  <Layout>\n    <h1>Batman TV Shows</h1>\n    <ul>\n      {props.shows.map(show => (\n        <li key={show.id}>\n          <Link as={`/p/${show.id}`} href={`/post?id=${show.id}`}>\n            <a>{show.name}</a>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  </Layout>\n)}\n\nIndex.getInitialProps = async function() {\n  let personal_api_response = {};\n  const response = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n  const data = await response.json();\n  personal_api_response = await fetch(\"http://localhost:5000/apii\");\n  const personal_api_data = await personal_api_response.json();\n  const merged_data = {...data, ...personal_api_data};\n  console.log(`\\x1b[36mits fucked ${Date()}\\x1b[0m`, merged_data);\n\n  console.log(`Show data fetched. Count: ${Object.keys(merged_data).length}`);\n\n  return {\n    shows: data.map(entry => entry.show)\n  }\n}\n\nexport default Index\n"]},"metadata":{},"sourceType":"module"}